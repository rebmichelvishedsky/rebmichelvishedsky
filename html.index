<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>In Memory of Reb Michel Vishedsky | לזכר הרב מיכל וישצקי</title>
  <style>
    /* (Keep your existing styles -- copied from your original file) */
    *{margin:0;padding:0;box-sizing:border-box}
    body{font-family:-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,Arial,sans-serif;background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);min-height:100vh;padding:20px;direction:ltr}
    body.hebrew{direction:rtl;font-family:'Arial Hebrew',Arial,sans-serif}
    .container{max-width:1200px;margin:0 auto}
    .header{background:white;border-radius:15px;padding:30px;margin-bottom:30px;box-shadow:0 10px 40px rgba(0,0,0,0.1);text-align:center}
    .lang-toggle{position:absolute;top:20px;right:20px;background:#764ba2;color:white;border:none;padding:10px 20px;border-radius:25px;cursor:pointer;font-size:14px;transition:all .3s}
    .lang-toggle:hover{background:#667eea;transform:scale(1.05)}
    .hebrew .lang-toggle{left:20px;right:auto}
    h1{color:#333;font-size:2.5em;margin-bottom:10px}
    .subtitle{color:#666;font-size:1.2em;margin-bottom:20px}
    .upload-section{background:white;border-radius:15px;padding:30px;margin-bottom:30px;box-shadow:0 10px 40px rgba(0,0,0,0.1)}
    .upload-btn{background:linear-gradient(135deg,#667eea 0%,#764ba2 100%);color:white;border:none;padding:15px 30px;border-radius:30px;font-size:18px;cursor:pointer;display:inline-block;margin:10px;transition:all .3s}
    .upload-btn:hover{transform:translateY(-2px);box-shadow:0 5px 20px rgba(0,0,0,0.2)}
    .upload-btn:disabled{opacity:.5;cursor:not-allowed}
    input[type="file"]{display:block;margin-top:10px}
    .form-input{width:100%;padding:15px;margin:10px 0;border:2px solid #e0e0e0;border-radius:10px;font-size:16px;transition:border-color .3s}
    .form-input:focus{outline:none;border-color:#667eea}
    textarea.form-input{min-height:120px;resize:vertical}
    .memories-grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(300px,1fr));gap:20px;margin-top:30px}
    .memory-card{background:white;border-radius:15px;padding:20px;box-shadow:0 5px 20px rgba(0,0,0,0.1);transition:transform .3s}
    .memory-card:hover{transform:translateY(-5px)}
    .memory-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:15px;padding-bottom:10px;border-bottom:1px solid #e0e0e0}
    .memory-author{font-weight:bold;color:#333}
    .memory-date{color:#999;font-size:.9em}
    .memory-content{color:#666;line-height:1.6;margin-bottom:15px;white-space:pre-wrap}
    .memory-media{width:100%;border-radius:10px;margin-top:10px;max-height:400px;object-fit:cover}
    .upload-status{display:none;padding:15px;border-radius:10px;margin:20px 0;text-align:center}
    .upload-status.success{background:#d4edda;color:#155724;display:block}
    .upload-status.error{background:#f8d7da;color:#721c24;display:block}
    .upload-status.info{background:#d1ecf1;color:#0c5460;display:block}
    .loading{text-align:center;padding:20px;display:none}
    .loading.show{display:block}
    .spinner{border:3px solid #f3f3f3;border-top:3px solid #667eea;border-radius:50%;width:40px;height:40px;animation:spin 1s linear infinite;margin:0 auto}
    @keyframes spin{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
    .filter-section{background:white;border-radius:15px;padding:20px;margin-bottom:20px;box-shadow:0 5px 20px rgba(0,0,0,0.1)}
    .filter-btn{background:#f0f0f0;border:none;padding:8px 16px;border-radius:20px;margin:5px;cursor:pointer;transition:all .3s}
    .filter-btn:hover,.filter-btn.active{background:#667eea;color:white}
    .notice{background:#fff3cd;color:#856404;padding:15px;border-radius:10px;margin-bottom:20px;text-align:center}
    @media (max-width:768px){h1{font-size:1.8em}.memories-grid{grid-template-columns:1fr}.upload-btn{width:100%;margin:5px 0}}
    /* small utility */
    .small { font-size:0.9em; color:#666; }
    .admin-toggle { background: #333; color: #fff; border-radius: 12px; padding: 6px 10px; cursor: pointer; margin-left: 10px; }
  </style>
</head>
<body>
  <button class="lang-toggle" onclick="toggleLanguage()">עברית</button>

  <div class="container">
    <div class="header">
      <h1 id="mainTitle">In Memory of Reb Michel Vishedsky</h1>
      <p class="subtitle" id="subtitle">Share your memories and moments</p>
    </div>

    <div class="upload-section">
      <h2 id="shareTitle">Share a Memory</h2>

      <div class="notice" id="mediaNotice">
        📷 / 🎥 / 🎵 Upload photos, videos, or audio — or just share a written memory.
      </div>

      <form id="memoryForm">
        <input type="text" class="form-input" id="authorName" placeholder="Your Name" required>
        <input type="email" class="form-input" id="authorEmail" placeholder="Your Email (optional)">
        <textarea class="form-input" id="memoryText" placeholder="Share your memory or story..." required></textarea>

        <!-- File input visible for uploads -->
        <label class="upload-btn" for="mediaFile">📁 Add Photo / Video / Audio</label>
        <input id="mediaFile" type="file" accept="image/*,video/*,audio/*" />

        <!-- Admin mode reveal for YouTube / PDF embed fields (optional, client-side) -->
        <div style="margin-top:8px;">
          <span class="small">Admin mode:</span>
          <button type="button" id="adminToggle" class="admin-toggle">Enable</button>
          <span class="small" style="margin-left:10px;color:#444">(reveals optional YouTube or PDF fields)</span>
        </div>

        <div id
        input[type="file"] {
            display: none;
        }

        .form-input {
            width: 100%;
            padding: 15px;
            margin: 10px 0;
            border: 2px solid #e0e0e0;
            border-radius: 10px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        .form-input:focus {
            outline: none;
            border-color: #667eea;
        }

        textarea.form-input {
            min-height: 120px;
            resize: vertical;
        }

        .memories-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            margin-top: 30px;
        }

        .memory-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }

        .memory-card:hover {
            transform: translateY(-5px);
        }

        .memory-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e0e0e0;
        }

        .memory-author {
            font-weight: bold;
            color: #333;
        }

        .memory-date {
            color: #999;
            font-size: 0.9em;
        }

        .memory-content {
            color: #666;
            line-height: 1.6;
            margin-bottom: 15px;
            white-space: pre-wrap;
        }

        .memory-media {
            width: 100%;
            border-radius: 10px;
            margin-top: 10px;
            max-height: 400px;
            object-fit: cover;
        }

        .upload-status {
            display: none;
            padding: 15px;
            border-radius: 10px;
            margin: 20px 0;
            text-align: center;
        }

        .upload-status.success {
            background: #d4edda;
            color: #155724;
            display: block;
        }

        .upload-status.error {
            background: #f8d7da;
            color: #721c24;
            display: block;
        }

        .upload-status.info {
            background: #d1ecf1;
            color: #0c5460;
            display: block;
        }

        .loading {
            display: none;
            text-align: center;
            padding: 20px;
        }

        .loading.show {
            display: block;
        }

        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .filter-section {
            background: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }

        .filter-btn {
            background: #f0f0f0;
            border: none;
            padding: 8px 16px;
            border-radius: 20px;
            margin: 5px;
            cursor: pointer;
            transition: all 0.3s;
        }

        .filter-btn:hover, .filter-btn.active {
            background: #667eea;
            color: white;
        }

        .notice {
            background: #fff3cd;
            color: #856404;
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 20px;
            text-align: center;
        }

        @media (max-width: 768px) {
            h1 {
                font-size: 1.8em;
            }
            
            .memories-grid {
                grid-template-columns: 1fr;
            }
            
            .upload-btn {
                width: 100%;
                margin: 5px 0;
            }
        }
    </style>
</head>
<body>
    <button class="lang-toggle" onclick="toggleLanguage()">עברית</button>
    
    <div class="container">
        <div class="header">
            <h1 id="mainTitle">In Memory of Reb Michel Vishedsky</h1>
            <p class="subtitle" id="subtitle">Share your memories and moments</p>
        </div>

        <div class="upload-section">
            <h2 id="shareTitle">Share a Memory</h2>
            
            <div class="notice" id="mediaNotice">
                📷 Photo & video uploads coming soon! For now, please share your written memories below.
            </div>
            
            <form id="memoryForm">
                <input type="text" class="form-input" id="authorName" placeholder="Your Name" required>
                <input type="email" class="form-input" id="authorEmail" placeholder="Your Email (optional)">
                <textarea class="form-input" id="memoryText" placeholder="Share your memory or story..." required></textarea>
                
                <!-- File upload temporarily disabled until Storage is available -->
                <div style="margin: 20px 0; display: none;" id="fileUploadSection">
                    <label for="photoUpload" class="upload-btn">
                        📷 <span id="photoLabel">Add Photo</span>
                    </label>
                    <input type="file" id="photoUpload" accept="image/*" onchange="handleFileSelect(event, 'photo')">
                </div>
                
                <button type="submit" class="upload-btn" style="width: 100%; background: linear-gradient(135deg, #28a745 0%, #20c997 100%);">
                    <span id="submitBtn">Submit Memory</span>
                </button>
            </form>
            
            <div id="uploadStatus" class="upload-status"></div>
            <div id="loading" class="loading">
                <div class="spinner"></div>
                <p id="loadingText">Uploading...</p>
            </div>
        </div>

        <div class="filter-section" style="display: none;" id="filterSection">
            <h3 id="filterTitle">Filter Memories</h3>
            <button class="filter-btn active" onclick="filterMemories('all')" id="filterAll">All</button>
            <button class="filter-btn" onclick="filterMemories('text')" id="filterText">Stories</button>
        </div>

        <div id="memoriesGrid" class="memories-grid">
            <div class="loading show">
                <div class="spinner"></div>
                <p>Loading memories...</p>
            </div>
        </div>
    </div>

    <!-- Firebase Configuration -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-firestore-compat.js"></script>

    <script>
        // Your Firebase configuration
        const firebaseConfig = {
        apiKey: "AIzaSyAB_Blh5iEqmc-NfnnKCUF0ahJE8TBs7Vg",
        authDomain: "rebmichel-11d46.firebaseapp.com",
        projectId: "rebmichel-11d46",
        storageBucket: "rebmichel-11d46.appspot.com",
        messagingSenderId: "244465725723",
        appId: "1:244465725723:web:d5fe068cb9b87e358763be",
        measurementId: "G-WJLYE5G1EX"
    };

        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const db = firebase.firestore();

        // Language toggle
        let currentLang = 'en';
        const translations = {
            en: {
                mainTitle: "In Memory of Reb Michel Vishedsky",
                subtitle: "Share your memories and moments",
                shareTitle: "Share a Memory",
                namePlaceholder: "Your Name",
                emailPlaceholder: "Your Email (optional)",
                memoryPlaceholder: "Share your memory or story...",
                photoLabel: "Add Photo",
                submitBtn: "Submit Memory",
                filterTitle: "Filter Memories",
                filterAll: "All",
                filterText: "Stories",
                uploadingText: "Submitting your memory...",
                successMessage: "Thank you for sharing your memory! It will appear below.",
                errorMessage: "Error submitting. Please try again.",
                loadingText: "Loading memories...",
                mediaNotice: "📷 Photo & video uploads coming soon! For now, please share your written memories below.",
                noMemories: "No memories yet. Be the first to share!"
            },
            he: {
                mainTitle: "לזכר הרב מיכל וישצקי",
                subtitle: "שתפו את הזכרונות והרגעים שלכם",
                shareTitle: "שתף זיכרון",
                namePlaceholder: "השם שלך",
                emailPlaceholder: "האימייל שלך (אופציונלי)",
                memoryPlaceholder: "שתף את הזיכרון או הסיפור שלך...",
                photoLabel: "הוסף תמונה",
                submitBtn: "שלח זיכרון",
                filterTitle: "סנן זכרונות",
                filterAll: "הכל",
                filterText: "סיפורים",
                uploadingText: "שולח את הזיכרון שלך...",
                successMessage: "תודה ששיתפת את הזיכרון שלך! הוא יופיע למטה.",
                errorMessage: "שגיאה בשליחה. אנא נסה שוב.",
                loadingText: "טוען זכרונות...",
                mediaNotice: "📷 העלאת תמונות וסרטונים תהיה זמינה בקרוב! בינתיים, אנא שתפו את הזכרונות הכתובים שלכם.",
                noMemories: "אין עדיין זכרונות. היו הראשונים לשתף!"
            }
        };

        function toggleLanguage() {
            currentLang = currentLang === 'en' ? 'he' : 'en';
            document.body.classList.toggle('hebrew', currentLang === 'he');
            document.querySelector('.lang-toggle').textContent = currentLang === 'en' ? 'עברית' : 'English';
            updateLanguage();
        }

        function updateLanguage() {
            const t = translations[currentLang];
            document.getElementById('mainTitle').textContent = t.mainTitle;
            document.getElementById('subtitle').textContent = t.subtitle;
            document.getElementById('shareTitle').textContent = t.shareTitle;
            document.getElementById('authorName').placeholder = t.namePlaceholder;
            document.getElementById('authorEmail').placeholder = t.emailPlaceholder;
            document.getElementById('memoryText').placeholder = t.memoryPlaceholder;
            document.getElementById('submitBtn').textContent = t.submitBtn;
            document.getElementById('loadingText').textContent = t.uploadingText;
            document.getElementById('mediaNotice').textContent = t.mediaNotice;
            
            // Update filter section if visible
            const filterTitle = document.getElementById('filterTitle');
            if (filterTitle) filterTitle.textContent = t.filterTitle;
            const filterAll = document.getElementById('filterAll');
            if (filterAll) filterAll.textContent = t.filterAll;
            const filterText = document.getElementById('filterText');
            if (filterText) filterText.textContent = t.filterText;
        }

        document.getElementById('memoryForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const loading = document.getElementById('loading');
            const status = document.getElementById('uploadStatus');
            const submitBtn = document.querySelector('button[type="submit"]');
            
            loading.classList.add('show');
            status.className = 'upload-status';
            submitBtn.disabled = true;
            
            try {
                const now = new Date();
                const memoryData = {
                    type: 'text',
                    author: document.getElementById('authorName').value.trim(),
                    email: document.getElementById('authorEmail').value.trim(),
                    text: document.getElementById('memoryText').value.trim(),
                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),
                    date: now.toISOString()
                };

                // Save to Firestore
                await db.collection('memories').add(memoryData);
                
                // Success
                loading.classList.remove('show');
                status.className = 'upload-status success';
                status.textContent = translations[currentLang].successMessage;
                
                // Reset form
                document.getElementById('memoryForm').reset();
                
                // Reload memories
                loadMemories();
                
                setTimeout(() => {
                    status.className = 'upload-status';
                    submitBtn.disabled = false;
                }, 3000);
                
            } catch (error) {
                loading.classList.remove('show');
                status.className = 'upload-status error';
                status.textContent = translations[currentLang].errorMessage;
                console.error('Error:', error);
                submitBtn.disabled = false;
            }
        });

        async function loadMemories(filter = 'all') {
            const grid = document.getElementById('memoriesGrid');
            
            try {
                let query = db.collection('memories').orderBy('timestamp', 'desc').limit(100);
                
                if (filter !== 'all') {
                    query = query.where('type', '==', filter);
                }
                
                const snapshot = await query.get();
                grid.innerHTML = '';
                
                if (snapshot.empty) {
                    grid.innerHTML = `<div style="grid-column: 1/-1; text-align: center; padding: 40px; background: white; border-radius: 15px;">
                        <p style="color: #666; font-size: 1.2em;">${translations[currentLang].noMemories}</p>
                    </div>`;
                    return;
                }
                
                snapshot.forEach(doc => {
                    const memory = doc.data();
                    const card = createMemoryCard(memory);
                    grid.innerHTML += card;
                });
                
            } catch (error) {
                console.error('Error loading memories:', error);
                grid.innerHTML = `<div style="grid-column: 1/-1; text-align: center; color: white;">
                    <p>Error loading memories. Please refresh the page.</p>
                    <p style="font-size: 0.9em; margin-top: 10px;">Error: ${error.message}</p>
                </div>`;
            }
        }

        function createMemoryCard(memory) {
            let date = 'Recent';
            if (memory.timestamp) {
                try {
                    date = new Date(memory.timestamp.toDate()).toLocaleDateString();
                } catch (e) {
                    if (memory.date) {
                        date = new Date(memory.date).toLocaleDateString();
                    }
                }
            }
            
            // Escape HTML to prevent XSS
            const escapeHtml = (text) => {
                const div = document.createElement('div');
                div.textContent = text;
                return div.innerHTML;
            };
            
            return `
                <div class="memory-card">
                    <div class="memory-header">
                        <span class="memory-author">${escapeHtml(memory.author)}</span>
                        <span class="memory-date">${date}</span>
                    </div>
                    <div class="memory-content">${escapeHtml(memory.text)}</div>
                </div>
            `;
        }

        function filterMemories(type) {
            document.querySelectorAll('.filter-btn').forEach(btn => btn.classList.remove('active'));
            event.target.classList.add('active');
            loadMemories(type);
        }

        // Load memories on page load
        window.addEventListener('DOMContentLoaded', () => {
            loadMemories();
        });
    </script>
</body>
</html>
